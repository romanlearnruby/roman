
# Массивы

# Инициализация массивов - это процесс создания и содержимого массива

# Инициализация пустого массива:

arr = []

# Инициализация массива с определенными значениями:

arr = [1, 2, 3, 4, 5]

# Инициализация массива с использованием метода Array.new:

arr = Array.new(10) # Метод new используется для создания нового экземпляра (или объекта) данного класса. В данном случае мы создаем новый объект класса Array

puts arr.inspect
# => [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil]

# Создание массива из 10 элементов со значением 0:

arr = Array.new(10, 0)

puts arr.inspect
# => [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Создание массива с повторяющимися значениями:
# В этом контексте "повторяющимися значениями" являются результаты вычисления каждого элемента, а не одинаковые значения для каждого элемента

arr = Array.new(3) { |i| i * 2 } # здесь мы передаем блок {|i|i * 2} в Array.new , это массив имеет размер 3.  Таким образом, блок будет вызван три раза: для индексов 0, 1 и 2

# При каждом вызове блока, индекс i передается в блок и умножается на 2:

# Для i = 0: 0 * 2 = 0
# Для i = 1: 1 * 2 = 2
# Для i = 2: 2 * 2 = 4

puts arr.inspect # => [0, 2, 4]

# Возврат данных из массива

arr = [10, 20, 30, 40, 50]

# Возврат по индексу:

puts arr[2]   # => 30

# Возврат первого и последнего элемента:

puts arr.first  # => 10
puts arr.last   # => 50

# Возврат элементов с использованием диапазона:

puts arr[1..3]  # => [20, 30, 40]

# Возврат элементов по условию с помощью метода select:

even_numbers = arr.select { |num| num.even? } # (select проходит по каждому элементу массива arr и применяет к нему блок { |num| num.even? }).
# (Этот блок принимает каждое число из массива (одно за другим) в качестве временной переменной num и проверяет, является ли это число четным с помощью метода even?)

# 1. Метод select применяется к массиву и позволяет отфильтровать его элементы на основе определенного условия
# 2. Блок { |num| num.even? }: в этом блоке переменная num представляет собой текущий элемент массива, который рассматривается методом select в каждой итерации
# 3. num.even? – это метод, который проверяет, является ли число четным. Если num является четным числом, метод возвращает true
# 4. Метод select будет включать в результирующий массив все элементы, для которых блок возвращает true

puts even_numbers.inspect  # => [10, 20, 30, 40, 50]

# Поиск элемента в массиве с помощью include?:

if arr.include?(30)
  puts "Элемент найден!"
else
  puts "Элемент не найден."
end  # => Элемент найден!

# Добавление данных в массив

# << (push) - этот метод добавляет элемент в конец массива и модифицирует исходный массив

arr = [1, 2, 3]
arr << 4
puts arr.inspect  # => [1, 2, 3, 4]

# push - также добавляет один или несколько элементов в конец массива

arr = [1, 2, 3]
arr.push(4, 5)
puts arr.inspect  # => [1, 2, 3, 4, 5]

# unshift - добавляет элемент в начало массива

arr = [1, 2, 3]
arr.unshift(0)
puts arr.inspect  # => [0, 1, 2, 3]

# insert - позволяет вставлять элемент на определенную позицию в массиве

arr = [1, 2, 4]
arr.insert(2, 3)  # Вставляем число 3 на позицию с индексом 2
puts arr.inspect  # => [1, 2, 3, 4]

# += (комбинирует два массива)

arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr1 += arr2
puts arr1.inspect  # => [1, 2, 3, 4, 5, 6]

# Изменение данных в массиве. Некоторые из этих методов (те, что оканчиваются на !) модифицируют исходный массив, в то время 
# как их аналоги без ! возвращают новый массив, не затрагивая оригинальный

# Изменение значения по индексу:

arr = [1, 2, 3, 4, 5]
arr[2] = 99
puts arr.inspect  # => [1, 2, 99, 4, 5]

# Использование метода map! для преобразования каждого элемента массива:

arr = [1, 2, 3, 4, 5]
arr.map! { |num| num * 2 }
puts arr.inspect  # => [2, 4, 6, 8, 10]

# Замена подмассива:

arr = [1, 2, 3, 4, 5]
arr[1, 3] = ['a', 'b']
puts arr.inspect  # => [1, 'a', 'b', 5]

# Использование метода fill:

arr = [1, 2, 3, 4, 5]
arr.fill('x', 2..3)
puts arr.inspect  # => [1, 2, 'x', 'x', 5]

# Использование метода replace для замены всего содержимого массива:

arr = [1, 2, 3, 4, 5]
arr.replace(['a', 'b', 'c'])
puts arr.inspect  # => ['a', 'b', 'c']

# Использование метода reverse! для изменения порядка элементов в массиве на обратный:

arr = [1, 2, 3, 4, 5]
arr.reverse!
puts arr.inspect  # => [5, 4, 3, 2, 1]

# Использование метода compact! для удаления всех nil элементов:

arr = [nil, nil, "roma", "ignat", nil, 1, 6, "sebastian"]
arr.compact!
puts arr.inspect # => ["roma", "ignat", 1, 6, "sebasian"]

# Удаление элементов в массиве

# pop – удаляет последний элемент из массива и возвращает его:

arr = [1, 2, 3, 4, 5]
item = arr.pop
puts item  # => 5
puts arr.inspect   # => [1, 2, 3, 4]

# shift – удаляет первый элемент из массива и возвращает его:

arr = [1, 2, 3, 4, 5]
item = arr.shift
puts item  # => 1
puts arr.inspect   # => [2, 3, 4, 5]

# delete_at(index) – удаляет элемент по указанному индексу:

arr = [1, 2, 3, 4, 5]
arr.delete_at(2)
puts arr.inspect   # => [1, 2, 4, 5]

# delete(value) – удаляет все вхождения указанного значения:

arr = [1, 2, 2, 3, 4, 5]
arr.delete(2)
puts arr.inspect   # => [1, 3, 4, 5]

# reject! – модифицирует исходный массив, удаляя из него все элементы, для которых блок возвращает true. Если ни один элемент не был удален, возвращает nil

arr = [1, 2, 3, 4, 5]
arr.reject! { |item| item > 3 }
puts arr.inspect   # => [1, 2, 3]

# clear – удаляет все элементы из массива:

arr = [1, 2, 3, 4, 5]
arr.clear
puts arr.inspect   # => []

# Цикл for. В Ruby может использоваться для итерации по массивам, диапазонам и другим коллекциям

fruits = ["яблоко", "банан", "вишня"]

for fruit in fruits
  puts "Фрукт: #{fruit}"

  # => Фрукт: яблоко
  # => Фрукт: банан
  # => Фрукт: вишня
end

for number in 1..5
  puts "Число: #{number}"

  # Число: 1
  # Число: 2
  # Число: 3
  # Число: 4
  # Число: 5
end

# Циклы each (метод). Oдин из наиболее часто используемых методов для итерации по коллекциям в Ruby. Он позволяет применять блок кода к каждому элементу коллекции

fruits = ["яблоко", "банан", "вишня"]

fruits.each do |fruit|
  puts "Фрукт: #{fruit}"

  # => Фрукт: яблоко
  # => Фрукт: банан
  # => Фрукт: вишня
end

(1..5).each do |number|
  puts "Число: #{number}"

  # Число: 1
  # Число: 2
  # Число: 3
  # Число: 4
  # Число: 5
end

capitals = {
  "Франция" => "Париж",
  "Испания" => "Мадрид",
  "Германия" => "Берлин"
}

capitals.each do |country, capital|
  puts "Столица #{country} - #{capital}."

  # Столица Франция - Париж.
  #Столица Испания - Мадрид.
  #Столица Германия - Берлин.

end
