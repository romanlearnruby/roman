=begin
	
Этот урок про Объекты

Все в Руби = объекты

Число (объект)

Строка (объект)

Булевое значение true, false (объект)

---------------------------------------------
Взаимодействие с объектами
Чтобы взаимодействовать с объетами, существует такая вещь, как МЕТОДЫ

МЕТОДЫ вызываются через . и пишется название метода

Примеры:

2.even? => true (Этот метод возвращает true, если число является четным, и false, если число является нечетным)
2.even?  # => true
3.even?  # => false
0.even?  # => true
-2.even? # => true
-3.even? # => false

5.next  # => 6 (Этот метод возвращает следующее значение в последовательности для чисел и строк)
"a".next  # => "b"
"z".next  # => "aa"
5.next.next  # => 7 (В приведенном примере первый вызов next инкрементирует число 5 до 6, а второй вызов next инкрементирует 6 до 7)
"a".next.next  # => "c"
5.next.next.even?  # => false (5.next.next.even? возвращает false, потому что 5.next.next равно 7, и 7 не является четным числом)

--------------------------------------------------------------------------------------------------------------------------
Работа с методами (иногда нам необходимо понять, какими свойствами обладает объект и какими методами)

1.methods # => next , odd? , even? ,times, + , - , * , / (Вызов 1.methods вернет массив методов, доступных для объекта типа Integer (в данном случае число 1), 
потому что 1 является экземпляром класса Integer)

-----------------------------------------------------------------------------------------------------------------------------------------------
Вызов метода с аргументами

["один", "два", "три"].index("два") => 1 (Метод .index возвращает индекс первого вхождения указанного элемента в массиве. Индексация в Ruby начинается с 0.
Строка "два" имеет индекс 1 в массиве ["один", "два", "три"]. Поэтому результатом выполнения этой строки кода будет число 1)

Для чисел (Numeric):

5.between?(1, 10)   # => true (Метод .between? доступен для некоторых классов в Ruby, таких как Numeric, Date, и Time. Он проверяет, находится ли объект 
между двумя другими объектами, включая границы.)
5.between?(5, 5)   # => true
5.between?(6, 10)  # => false

Для дат (Date):

require 'date' (Эта строка подключает стандартную библиотеку date, которая содержит классы для работы с датами)

date1 = Date.new(2021, 1, 1) (Здесь создается новый объект Date, представляющий 1 января 2021 года. 
Параметры передаваемые в .new — это год, месяц и день соответственно)

date2 = Date.new(2021, 12, 31) (Здесь создается новый объект Date, представляющий 31 декабря 2021 года)

check_date = Date.new(2021, 5, 5) (Здесь создается новый объект Date, представляющий 5 мая 2021 года)

check_date.between?(date1, date2)  # => true (Это ключевая часть примера. Метод .between? проверяет, находится ли check_date 
между date1 и date2, включая границы. В данном случае, так как 5 мая 2021 года находится между 1 января и 31 декабря 2021 года, метод возвращает true.)
	
=end

require 'date' # require – это метод в Ruby, который позволяет загрузить и выполнить код из других файлов и библиотек
# Организация кода: 
# Когда вы пишете программу или приложение, ваш код может стать очень объемным. Чтобы сделать код более читаемым и легко поддерживаемым, 
# вы можете разделить его на разные файлы или модули. Тогда, когда вам нужна функциональность из другого файла, вы просто "требуете" его с помощью require

# Избегание повторной загрузки:
# Если библиотека уже была загружена ранее, require не будет загружать ее снова. Это помогает оптимизировать производительность

# Стандартные и сторонние библиотеки:
# Ruby имеет множество встроенных библиотек (например, date, net/http, json и многие другие), которые предоставляют дополнительную функциональность. 
# Эти библиотеки не загружаются автоматически с вашим кодом из соображений производительности. Если вам нужна какая-либо из этих библиотек, вы должны 
# явно указать это с помощью require

# Как это работает?
# Когда вы вызываете require 'some_library', Ruby делает следующее:
# 1. Проверяет, была ли эта библиотека уже загружена. Если да, то он просто возвращает false и не делает ничего
# 2. Если библиотека еще не была загружена, Ruby ищет файл с именем some_library.rb в директориях, указанных в глобальной переменной $LOAD_PATH (или $:)
# 3. Если файл найден, Ruby загружает и выполняет его содержимое. Если файл не найден, генерируется исключение LoadError
# В нашем примере с require 'date', мы загружаем стандартную библиотеку Ruby для работы с датами. Это дает нам доступ к классу Date и его методам, 
# которые мы можем использовать в нашем коде.

date1 = Date.new(2021, 1, 1) # здесь происходит создание нового объекта класса Date
# 1. Date: Это класс из стандартной библиотеки Ruby, который предоставляет методы и функции для работы с датами
# 2. .new: Это метод класса (или конструктор), который позволяет создавать новые экземпляры (объекты) этого класса. 
# Класс Date ожидает, что вы передадите этому методу год, месяц и день (в этом порядке) в качестве аргументов
# 3. date1 = ...: Здесь переменной date1 присваивается значение новосозданного объекта Date, что позволяет нам ссылаться на этот объект и использовать его позднее в коде

date2 = Date.new(2021, 12, 31)

check_date = Date.new(2021, 5, 5)

puts check_date.between?(date1, date2)

