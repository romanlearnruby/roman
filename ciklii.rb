
# Условия и циклы

# Логические операторы (- + = == % и так далее)

# = (присваивание)
# == (сравнение)

# ----------------------------------------

# Комбинирование операторов 

# Оператор && (И) - Оператор && проверяет два условия, и если оба из них верны, то весь оператор возвращает true

age = 22
name = "Alex"

if age > 20 && name == "Alex"
  puts "Это Alex, и ему больше 20 лет."
end

# Оператор || (ИЛИ) - Оператор || также проверяет два условия, но возвращает true, если хотя бы одно из условий верно

day = "воскресенье"

if day == "суббота" || day == "воскресенье"
  puts "Сегодня выходной!"
end

# Комбинирование && и ||

age = 25
name = "Alex"
day = "понедельник"

if age > 20 && (name == "Alex" || day == "понедельник")
  puts "Это Alex старше 20 лет или сегодня понедельник."
end

# Рассмотрим сложные примеры

# Комбинирование условий с различными данными

student = {  # student = { - создается новый хеш (ассоциативный массив) и присваивается переменной student

  name: "Иван", # name: "Иван", - в хеш добавляется пара ключ-значение, где :name - ключ, а "Иван" - значение этого ключа

  age: 18, # age: 18, - добавляется ключ :age со значением 18

  grades: [4, 5, 4, 5, 3], # grades: [4, 5, 4, 5, 3], - добавляется ключ :grades со значением в виде массива оценок

  is_scholarship_holder: true # is_scholarship_holder: true - добавляется ключ :is_scholarship_holder со значением true
}

average_grade = student[:grades].reduce(0, :+) / student[:grades].length 
# 1. average_grade = - объявляется новая переменная average_grade, которой будет присвоено значение среднего балла студента
# 2. student[:grades] - обращение к значению ключа :grades в хеше student, т.е. к массиву оценок
# 3. .reduce(0, :+) - это метод, который применяется к массиву. Он проходит по всем элементам массива и суммирует их. 0 - это 
# начальное значение, а :+ - это то, каким образом будет проводиться редукция (в данном случае суммирование)
# 4. / student[:grades].length - подсчет среднего значения. Результат суммирования делится на количество элементов в массиве (т.е. на количество оценок)

if student[:age] > 17 && (average_grade > 4 || student[:is_scholarship_holder])
  puts "Студент #{student[:name]} может претендовать на дополнительную стипендию."
end

# Вложенные условия

weather = {
  temperature: 22,
  is_raining: false,
  wind_speed: 5
}

# Это главное условие, которое проверяет два условия: температура выше 20 градусов И не идет дождь (!weather[:is_raining] возвращает true, если weather[:is_raining] равно false)
if weather[:temperature] > 20 && !weather[:is_raining]

# Внутри главного условия мы проверяем еще одно условие: либо скорость ветра меньше 10, либо температура выше 25 градусов, и при этом скорость ветра меньше 15
# Это условие (вложенное) будет проверяться ток в том случае, если главное условие = true
  if weather[:wind_speed] < 10 || (weather[:temperature] > 25 && weather[:wind_speed] < 15)

# Это сообщение будет показано, если вложенное условие истинно:	
    puts "Отличная погода для прогулки в парке!"
  else

# Это сообщение будет показано, если вложенное условие ложно:
    puts "Возможно, будет слишком ветрено в парке."
  end
else

# Если главное условие не выполнено, то будет показано это сообщение:
  puts "Сегодня не лучший день для прогулок."
end

# Комбинирование с другими методами

products = [ # это у нас массив products, содержащий хэши

# Каждый хэш представляет собой товар с определенными атрибутами: названием (name), количеством (quantity) и категорией (category)
  {name: "Банан", quantity: 10, category: "Фрукты"},
  {name: "Молоко", quantity: 0, category: "Молочные продукты"},
  {name: "Яблоко", quantity: 5, category: "Фрукты"},
  {name: "Мороженое", quantity: 2, category: "Десерты"}
]

# .any? метод проверяет, есть ли в массиве хотя бы один элемент, соответствующий заданному условию. 
# В нашем случае условие таково: товар должен принадлежать к категории "Фрукты" и иметь количество больше 0
# 1. products.any? - Это вызов метода any? для массива products. Метод any? итерируется по каждому элементу массива и возвращает true, 
# если хотя бы для одного элемента блок кода возвращает true.
# 2. { |product| ... } - Это блок кода, который принимает каждый товар (product) из массива products по очереди
# 3. product[:category] == "Фрукты" - Здесь происходит сравнение. Этот код проверяет категорию текущего товара. 
# Если категория товара равна "Фрукты", то условие возвращает true
if products.any? { |product| product[:category] == "Фрукты" && product[:quantity] > 0 }
  puts "Есть свежие фрукты в наличии!"

# 1. Метод .all? итерируется по каждому элементу массива и возвращает true, только если для всех элементов массива блок кода возвращает true
# 2. { |product| ... } - Это блок кода, который принимает каждый товар (product) из массива products по очереди
# 3. product[:category] == "Молочные продукты" - Этот код проверяет категорию текущего товара
# 4. product[:quantity] == 0 - Это второе условие внутри блока. Оно проверяет, что количество (quantity) текущего товара равно 0

elsif products.all? { |product| product[:category] == "Молочные продукты" && product[:quantity] == 0 }
  puts "Все молочные продукты закончились."
else
  puts "Проверьте другие категории товаров."
end

# Вы можете использовать elsif для проверки нескольких условий последовательно в одной конструкции if

x = 10

if x > 10
  puts "x больше 10"
elsif x < 10
  puts "x меньше 10"
else
  puts "x равно 10"
end

# Это обратный оператор для if. Когда unless используется, код в блоке будет выполнен, если условие ложно

x = 5

unless x > 10
  puts "x не больше 10"
else
  puts "x больше 10"
end

# case - многозначный оператор выбора, который аналогичен switch в других языках программирования

grade = 'B'

case grade
when 'A'
  puts "Отлично!"
when 'B'
  puts "Хорошо!"
when 'C'
  puts "Удовлетворительно"
else
  puts "Нужно больше учиться!"
end

# case может также использоваться без определенного условия, и в этом случае каждый блок when должен содержать полное условное выражение:

x = 8

case
when x > 10
  puts "x больше 10"
when x < 5
  puts "x меньше 5"
else
  puts "x между 5 и 10"
end

# --------------------------------------------------------------------------------------------------------------------

# Тернарный оператор - это сокращенная форма условного оператора if...else, который принимает три аргумента: условие, значение, возвращаемое, если условие истинно, 
# и значение, возвращаемое, если условие ложно

number = 4 

# number.even? – это условие
# Если number.even? возвращает true, тернарный оператор вернет строку "Четное"
# Если number.even? возвращает false, тернарный оператор вернет строку "Нечетное".
result = number.even? ? "Четное" : "Нечетное"
puts result  # Выведет "Четное"

a = 5
b = 8
max = a > b ? a : b
puts max  # Выведет 8

# ---------------------------------------------------------------------------------------------------

# Пару примеров с циклами

# Бесконечный цикл Loop

count = 0

loop do
  puts "Это итерация номер #{count}"
  count += 1
  
  # Прерываем цикл, когда count достигает 5
  if count == 5
    break # прерывает цикл
  end
end

puts "Цикл завершился!"

# Пример с оператором .times

5.times do |i|
  puts "Итерация номер #{i + 1}"

# Вот что мы получили:
# Итерация номер 1
# Итерация номер 2
# Итерация номер 3
# Итерация номер 4
# Итерация номер 5

# Если бы там было просто {i}, то мы бы получили результат от 0 до 4

end